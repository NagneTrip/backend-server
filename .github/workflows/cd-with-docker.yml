name: CD with Gradle

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "adopt"

      - name: Make application-AWS.properties
        run: |
          cd ./src/main/resources
          touch ./application-AWS.properties
          echo "${{ secrets.PROPERTIES_AWS }}" > ./application-AWS.properties
        shell: bash

      - name: Make application-JWT.properties
        run: |
          cd ./src/main/resources
          touch ./application-JWT.properties
          echo "${{ secrets.PROPERTIES_JWT }}" > ./application-JWT.properties
        shell: bash

      - name: Make application-MYSQL.properties
        run: |
          cd ./src/main/resources
          touch ./application-MYSQL.properties
          echo "${{ secrets.PROPERTIES_MYSQL }}" > ./application-MYSQL.properties
        shell: bash

      - name: Make application-OAUTH.properties
        run: |
          cd ./src/main/resources
          touch ./application-OAUTH.properties
          echo "${{ secrets.PROPERTIES_OAUTH }}" > ./application-OAUTH.properties
        shell: bash

      - name: Make application-FRONT.properties
        run: |
          cd ./src/main/resources
          touch ./application-FRONT.properties
          echo "${{ secrets.PROPERTIES_FRONT }}" > ./application-FRONT.properties
        shell: bash

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Docker build & push to docker repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}:latest .
          docker push ${{ secrets.DOCKER_REPO }}:latest

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PEM_FILE }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}:latest
            docker run -p 8080:8080 -d ${{ secrets.DOCKER_REPO }}:latest
            docker image prune -f
