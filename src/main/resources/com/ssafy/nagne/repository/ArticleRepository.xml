<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.nagne.repository.ArticleRepository">
    <insert id="save" parameterType="Article" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO article(user_id,
                            content,
                            created_date,
                            last_modified_date)
        VALUES (#{article.userId},
                #{article.content},
                now(),
                now())
    </insert>

    <resultMap id="ArticleWithImage" type="Article">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="content" property="content"/>
        <result column="like_count" property="likeCount"/>
        <result column="is_liked" property="isLiked"/>
        <result column="is_bookmarked" property="isBookmarked"/>
        <result column="created_date" property="createdDate"/>
        <result column="last_modified_date" property="lastModifiedDate"/>
        <collection property="imageUrls" ofType="java.lang.String">
            <result column="url" property="url"/>
        </collection>
    </resultMap>

    <select id="findById" resultMap="ArticleWithImage">
        SELECT article.*,
               image.url                      AS url,
               (like1.user_id IS NOT NULL)    AS is_liked,
               (bookmark.user_id IS NOT NULL) AS is_bookmarked,
               COUNT(like2.user_id)           as like_count
        FROM article
                 LEFT JOIN
             image ON article.id = image.article_id
                 LEFT JOIN
             article_likes as like1 ON article.id = like1.article_id AND like1.user_id = #{userId}
                 LEFT JOIN
             bookmark ON article.id = bookmark.article_id AND bookmark.user_id = #{userId}
                 LEFT JOIN
             article_likes as like2 ON article.id = like2.article_id
        WHERE article.id = #{id}
        GROUP BY article.id, image.url;
    </select>

    <select id="findArticles" resultMap="ArticleWithImage">
        SELECT article.*,
               image.url                      AS url,
               (like1.user_id IS NOT NULL)    AS is_liked,
               (bookmark.user_id IS NOT NULL) AS is_bookmarked,
               COUNT(like2.user_id)           as like_count
        FROM article
                 LEFT JOIN
             image ON article.id = image.article_id
                 LEFT JOIN
             article_likes as like1 ON article.id = like1.article_id AND like1.user_id = #{userId}
                 LEFT JOIN
             bookmark ON article.id = bookmark.article_id AND bookmark.user_id = #{userId}
                 LEFT JOIN
             article_likes as like2 ON article.id = like2.article_id
        WHERE article.id IN (SELECT * FROM (SELECT DISTINCT article_id
                             FROM article_hashtag
                             WHERE hashtag_name IN (
                                 <foreach collection="tags" item="tag" separator=",">
                                    #{tag}
                                 </foreach>)
                               AND article_id &lt; #{pageable.lastIndex}
                             ORDER BY article_id DESC LIMIT #{pageable.size}) AS paging_article_ids)
        GROUP BY article.id, image.url
        ORDER BY article.id DESC;
    </select>

    <select id="findFollowerArticles" resultMap="ArticleWithImage">
        SELECT article.*,
               image.url                      AS url,
               (like1.user_id IS NOT NULL)    AS is_liked,
               (bookmark.user_id IS NOT NULL) AS is_bookmarked,
               COUNT(like2.user_id)           as like_count
        FROM article
                 LEFT JOIN
             image ON article.id = image.article_id
                 LEFT JOIN
             article_likes as like1 ON article.id = like1.article_id AND like1.user_id = #{userId}
                 LEFT JOIN
             bookmark ON article.id = bookmark.article_id AND bookmark.user_id = #{userId}
                 LEFT JOIN
             article_likes as like2 ON article.id = like2.article_id
        WHERE id IN (SELECT *
                     FROM (SELECT article.id
                           FROM follow
                                    LEFT JOIN article ON follow.following_id = article.user_id
                           WHERE follower_id = #{userId}
                             AND article.id &lt; #{pageable.lastIndex}
                           ORDER BY article.id DESC LIMIT #{pageable.size}) AS paging_article_ids)
        GROUP BY article.id, image.url
        ORDER BY article.id DESC;
    </select>

    <select id="findBookmarkArticles" resultMap="ArticleWithImage">
        SELECT article.*,
               image.url                      AS url,
               (like1.user_id IS NOT NULL)    AS is_liked,
               (bookmark.user_id IS NOT NULL) AS is_bookmarked,
               COUNT(like2.user_id)           as like_count
        FROM article
                 LEFT JOIN
             image ON article.id = image.article_id
                 LEFT JOIN
             article_likes as like1 ON article.id = like1.article_id AND like1.user_id = #{userId}
                 LEFT JOIN
             bookmark ON article.id = bookmark.article_id AND bookmark.user_id = #{userId}
                 LEFT JOIN
             article_likes as like2 ON article.id = like2.article_id
        WHERE id IN (SELECT *
                     FROM (SELECT article_id
                           FROM bookmark
                           WHERE user_id = #{userId}
                             AND article_id &lt; #{pageable.lastIndex}
                           ORDER BY article_id DESC LIMIT #{pageable.size}) AS paging_article_ids)
        GROUP BY article.id, image.url
        ORDER BY article.id DESC;
    </select>

    <update id="update">
        UPDATE article
        SET content            = #{article.content},
            last_modified_date = now()
        WHERE id = #{article.id}
    </update>

    <delete id="delete">
        DELETE
        FROM article
        WHERE id = #{id}
    </delete>
</mapper>