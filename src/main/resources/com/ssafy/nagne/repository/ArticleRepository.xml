<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.nagne.repository.ArticleRepository">
    <insert id="save" parameterType="Article" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO article(user_id,
                            content,
                            created_date,
                            last_modified_date)
        VALUES (#{article.userId},
                #{article.content},
                now(),
                now())
    </insert>

    <resultMap id="ArticleWithImage" type="Article">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="user_nickname" property="userNickname"/>
        <result column="user_profile_image" property="userProfileImage"/>
        <result column="user_tier" property="userTier"/>
        <result column="content" property="content"/>
        <result column="comment_count" property="commentCount"/>
        <result column="like_count" property="likeCount"/>
        <result column="is_liked" property="isLiked"/>
        <result column="is_bookmarked" property="isBookmarked"/>
        <result column="created_date" property="createdDate"/>
        <result column="last_modified_date" property="lastModifiedDate"/>
        <collection property="imageUrls" ofType="java.lang.String">
            <result column="url" property="url"/>
        </collection>
    </resultMap>

    <select id="findById" resultMap="ArticleWithImage">
        SELECT article.*,
               users.nickname                      AS user_nickname,
               users.profile_image                 AS user_profile_image,
               users.tier                          AS user_tier,
               image.url                           AS url,
               (article_likes.user_id IS NOT NULL) AS is_liked,
               (bookmark.user_id IS NOT NULL)      AS is_bookmarked,
               IFNULL(comment_counts.count, 0)     AS comment_count,
               IFNULL(likes_counts.count, 0)       AS like_count
        FROM article
                 LEFT JOIN
             users ON article.user_id = users.id
                 LEFT JOIN
             image ON article.id = image.article_id
                 LEFT JOIN
             article_likes ON article.id = article_likes.article_id AND article_likes.user_id = #{userId}
                 LEFT JOIN
             bookmark ON article.id = bookmark.article_id AND bookmark.user_id = #{userId}
                 LEFT JOIN (SELECT article_id, COUNT(*) AS count FROM comment GROUP BY article_id) AS comment_counts
                           ON article.id = comment_counts.article_id
                 LEFT JOIN (SELECT article_id, COUNT(*) AS count FROM article_likes GROUP BY article_id) AS likes_counts
                           ON article.id = likes_counts.article_id
        WHERE article.id = #{id}
    </select>

    <select id="findAll" resultMap="ArticleWithImage">
        SELECT article.*,
               users.nickname                  AS user_nickname,
               users.profile_image             AS user_profile_image,
               users.tier                      AS user_tier,
               image.url                       AS url,
               IFNULL(comment_counts.count, 0) AS comment_count,
               IFNULL(likes_counts.count, 0)   AS like_count
        FROM article
                 LEFT JOIN
             users ON article.user_id = users.id
                 LEFT JOIN
             image ON article.id = image.article_id
                 LEFT JOIN (SELECT article_id, COUNT(*) AS count FROM comment GROUP BY article_id) AS comment_counts
                           ON article.id = comment_counts.article_id
                 LEFT JOIN (SELECT article_id, COUNT(*) AS count FROM article_likes GROUP BY article_id) AS likes_counts
                           ON article.id = likes_counts.article_id
        WHERE article.id IN (SELECT *
                             FROM (SELECT id
                                   FROM article
                                   WHERE id &lt; #{pageable.lastIndex}
                                   ORDER BY id DESC LIMIT #{pageable.size}) AS paging_article_ids)
        ORDER BY article.id DESC;
    </select>

    <select id="findArticlesByTags" resultMap="ArticleWithImage">
        SELECT article.*,
        users.nickname AS user_nickname,
        users.profile_image AS user_profile_image,
        users.tier AS user_tier,
        image.url AS url,
        (article_likes.user_id IS NOT NULL) AS is_liked,
        (bookmark.user_id IS NOT NULL) AS is_bookmarked,
        IFNULL(comment_counts.count, 0) AS comment_count,
        IFNULL(likes_counts.count, 0) AS like_count
        FROM article
        LEFT JOIN
        users ON article.user_id = users.id
        LEFT JOIN
        image ON article.id = image.article_id
        LEFT JOIN
        article_likes ON article.id = article_likes.article_id AND article_likes.user_id = #{userId}
        LEFT JOIN
        bookmark ON article.id = bookmark.article_id AND bookmark.user_id = #{userId}
        LEFT JOIN (SELECT article_id, COUNT(*) AS count FROM comment GROUP BY article_id) AS comment_counts
        ON article.id = comment_counts.article_id
        LEFT JOIN (SELECT article_id, COUNT(*) AS count FROM article_likes GROUP BY article_id) AS likes_counts
        ON article.id = likes_counts.article_id
        WHERE article.id IN (SELECT * FROM (SELECT DISTINCT article_id
        FROM article_hashtag
        WHERE hashtag_name IN (
        <foreach collection="tags" item="tag" separator=",">
            #{tag}
        </foreach>)
        AND article_id &lt; #{pageable.lastIndex}
        ORDER BY article_id DESC LIMIT #{pageable.size}) AS paging_article_ids)
        ORDER BY article.id DESC;
    </select>

    <select id="findFollowerArticles" resultMap="ArticleWithImage">
        SELECT article.*,
               users.nickname                      AS user_nickname,
               users.profile_image                 AS user_profile_image,
               users.tier                          AS user_tier,
               image.url                           AS url,
               (article_likes.user_id IS NOT NULL) AS is_liked,
               (bookmark.user_id IS NOT NULL)      AS is_bookmarked,
               IFNULL(comment_counts.count, 0)     AS comment_count,
               IFNULL(likes_counts.count, 0)       AS like_count
        FROM article
                 LEFT JOIN
             users ON article.user_id = users.id
                 LEFT JOIN
             image ON article.id = image.article_id
                 LEFT JOIN
             article_likes ON article.id = article_likes.article_id AND article_likes.user_id = #{userId}
                 LEFT JOIN
             bookmark ON article.id = bookmark.article_id AND bookmark.user_id = #{userId}
                 LEFT JOIN (SELECT article_id, COUNT(*) AS count FROM comment GROUP BY article_id) AS comment_counts
                           ON article.id = comment_counts.article_id
                 LEFT JOIN (SELECT article_id, COUNT(*) AS count FROM article_likes GROUP BY article_id) AS likes_counts
                           ON article.id = likes_counts.article_id
        WHERE article.id IN (SELECT *
                             FROM (SELECT article.id
                                   FROM follow
                                            LEFT JOIN article ON follow.following_id = article.user_id
                                   WHERE follower_id = #{userId}
                                     AND article.id &lt; #{pageable.lastIndex}
                                   ORDER BY article.id DESC LIMIT #{pageable.size}) AS paging_article_ids)
        ORDER BY article.id DESC;
    </select>

    <select id="findBookmarkArticles" resultMap="ArticleWithImage">
        SELECT article.*,
               users.nickname                      AS user_nickname,
               users.profile_image                 AS user_profile_image,
               users.tier                          AS user_tier,
               image.url                           AS url,
               (article_likes.user_id IS NOT NULL) AS is_liked,
               (bookmark.user_id IS NOT NULL)      AS is_bookmarked,
               IFNULL(comment_counts.count, 0)     AS comment_count,
               IFNULL(likes_counts.count, 0)       AS like_count
        FROM article
                 LEFT JOIN
             users ON article.user_id = users.id
                 LEFT JOIN
             image ON article.id = image.article_id
                 LEFT JOIN
             article_likes ON article.id = article_likes.article_id AND article_likes.user_id = #{userId}
                 LEFT JOIN
             bookmark ON article.id = bookmark.article_id AND bookmark.user_id = #{userId}
                 LEFT JOIN (SELECT article_id, COUNT(*) AS count FROM comment GROUP BY article_id) AS comment_counts
                           ON article.id = comment_counts.article_id
                 LEFT JOIN (SELECT article_id, COUNT(*) AS count FROM article_likes GROUP BY article_id) AS likes_counts
                           ON article.id = likes_counts.article_id
        WHERE article.id IN (SELECT *
                             FROM (SELECT article_id
                                   FROM bookmark
                                   WHERE user_id = #{userId}
                                     AND article_id &lt; #{pageable.lastIndex}
                                   ORDER BY article_id DESC LIMIT #{pageable.size}) AS paging_article_ids)
        ORDER BY article.id DESC;
    </select>

    <update id="update">
        UPDATE article
        SET content            = #{article.content},
            last_modified_date = now()
        WHERE id = #{article.id}
    </update>

    <delete id="delete">
        DELETE
        FROM article
        WHERE id = #{id}
    </delete>
</mapper>